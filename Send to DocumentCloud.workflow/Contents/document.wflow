<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>530</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.path</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>2.1.1</string>
				<key>AMApplication</key>
				<array>
					<string>Finder</string>
				</array>
				<key>AMParameterProperties</key>
				<dict/>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.path</string>
					</array>
				</dict>
				<key>AMRequiredResources</key>
				<array/>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Get Selected Finder Items 2.action</string>
				<key>ActionName</key>
				<string>Get Selected Finder Items</string>
				<key>ActionParameters</key>
				<dict/>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.GetSelectedFinderItems2</string>
				<key>CFBundleVersion</key>
				<string>2.1.1</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryFilesAndFolders</string>
				</array>
				<key>Class Name</key>
				<string>AMGetSelectedFinderItemsAction</string>
				<key>InputUUID</key>
				<string>BF480189-DF01-4E3E-B4D0-71DB38369210</string>
				<key>Keywords</key>
				<array/>
				<key>OutputUUID</key>
				<string>E6C84D70-D558-41A7-AFA1-2CFE93D2C382</string>
				<key>UUID</key>
				<string>70C8C533-E9C4-4F27-8CC7-F536B71B7737</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Finder</string>
				</array>
				<key>arguments</key>
				<dict/>
				<key>conversionLabel</key>
				<integer>0</integer>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>207.000000:68.000000</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>2.0.3</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>COMMAND_STRING</key>
					<dict/>
					<key>CheckedForUserDefaultShell</key>
					<dict/>
					<key>inputMethod</key>
					<dict/>
					<key>shell</key>
					<dict/>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run Shell Script.action</string>
				<key>ActionName</key>
				<string>Run Shell Script</string>
				<key>ActionParameters</key>
				<dict>
					<key>COMMAND_STRING</key>
					<string>#!/bin/bash
## DocumentCloud Upload Quick Action

logfile="/tmp/doccloud_upload_$(date +%s).log"

if ! python3 -c "import documentcloud" 2&gt;/dev/null; then
    result=$(osascript -e 'display dialog "DocumentCloud Python package not found. Install it now?" buttons {"Cancel", "Install"} default button "Install"' -e 'button returned of result' 2&gt;/dev/null)
    if [ "$result" = "Install" ]; then
        osascript -e 'display notification "Installing python-documentcloud..." with title "DocumentCloud Setup"'
        if pip3 install python-documentcloud 2&gt;&amp;1 | tee -a "$logfile"; then
            osascript -e 'display notification "Python package installed successfully!" with title "DocumentCloud Setup"'
        else
            osascript -e 'display dialog "Failed to install python-documentcloud. Please run: pip3 install python-documentcloud" buttons {"OK"} default button "OK"'
            exit 1
        fi
    else
        exit 0
    fi
fi

email=$(security find-generic-password -s "MuckRock" 2&gt;/dev/null | grep "acct" | cut -d '"' -f 4)
[ -z "$email" ] &amp;&amp; email=$(security find-generic-password -s "MuckRock" -g 2&gt;&amp;1 | sed -n 's/.*"acct"&lt;blob&gt;="\([^"]*\)".*/\1/p')

if [ -n "$email" ]; then
    password=$(security find-generic-password -a "$email" -s "MuckRock" -w 2&gt;/dev/null)
    [ -z "$password" ] &amp;&amp; password=$(security find-generic-password -s "MuckRock" -w 2&gt;/dev/null)
fi

if [ -z "$email" ] || [ -z "$password" ]; then
    result=$(osascript -e 'display dialog "No MuckRock credentials found in Keychain. Set them up now?" buttons {"Cancel", "Setup"} default button "Setup"' -e 'button returned of result' 2&gt;/dev/null)
    if [ "$result" = "Setup" ]; then
        email=$(osascript -e 'display dialog "Enter your DocumentCloud/MuckRock email:" default answer "" buttons {"Cancel", "OK"} default button "OK"' -e 'text returned of result' 2&gt;/dev/null)
        if [ $? -ne 0 ] || [ -z "$email" ]; then
            exit 0
        fi

        password=$(osascript -e 'display dialog "Enter your DocumentCloud/MuckRock password:" default answer "" buttons {"Cancel", "OK"} default button "OK" with hidden answer' -e 'text returned of result' 2&gt;/dev/null)
        if [ $? -ne 0 ] || [ -z "$password" ]; then
            exit 0
        fi
        
        if security add-generic-password -s "MuckRock" -a "$email" -w "$password" 2&gt;&amp;1 | tee -a "$logfile"; then
            osascript -e 'display notification "Credentials saved to Keychain!" with title "DocumentCloud Setup"'
            osascript -e 'display dialog "Setup complete! You can now upload documents to DocumentCloud." buttons {"OK"} default button "OK"'
        else
            osascript -e 'display dialog "Failed to save credentials. Please add manually to Keychain." buttons {"OK"} default button "OK"'
            exit 1
        fi
    else
        exit 0
    fi
fi

if [ $# -eq 0 ]; then
    input_files=()
    while IFS= read -r line; do
        if [ -n "$line" ]; then
            input_files+=("$line")
        fi
    done
else
    input_files=("$@")
fi

temp_unique_files="/tmp/doccloud_unique_$(date +%s).txt"
&gt; "$temp_unique_files"  # Clear the file

for file in "${input_files[@]}"; do
    if ! grep -Fx "$file" "$temp_unique_files" &gt;/dev/null 2&gt;&amp;1; then
        echo "$file" &gt;&gt; "$temp_unique_files"
    fi
done

file_count=$(wc -l &lt; "$temp_unique_files" | tr -d ' ')

echo "Processing $file_count unique file(s)" &gt;&gt; "$logfile"

if [ $file_count -eq 1 ]; then
    first_file=$(head -n1 "$temp_unique_files")
    filename=$(basename "$first_file")
    
    title=$(osascript -e "display dialog \"Enter Document Title:\" default answer \"$filename\" buttons {\"Cancel\", \"OK\"} default button \"OK\"" -e "text returned of result" 2&gt;/dev/null)
    [ $? -ne 0 ] &amp;&amp; exit 0
else
    osascript -e "display notification \"Uploading $file_count files with original names\" with title \"DocumentCloud Upload\""
fi

get_project() {
    python3 -c "
from documentcloud import DocumentCloud
import sys
try:
    client = DocumentCloud('$email', '$password')
    projects = list(client.projects.all())
    if projects:
        print(','.join([p.title for p in projects]))
    else:
        print('NONE')
except:
    print('ERROR')
"
}

project_choice=$(get_project 2&gt;&gt;"$logfile")

case "$project_choice" in
    "ERROR")
        osascript -e 'display notification "Failed to fetch projects. Using text input." with title "DocumentCloud Warning"'
        project=$(osascript -e 'display dialog "Enter Project Name (optional):" default answer "" buttons {"Cancel", "OK"} default button "OK"' -e 'text returned of result' 2&gt;/dev/null)
        [ $? -ne 0 ] &amp;&amp; exit 0
        ;;
    "NONE")
        project=$(osascript -e 'display dialog "No existing projects found. Enter new project name (optional):" default answer "" buttons {"Cancel", "OK"} default button "OK"' -e 'text returned of result' 2&gt;/dev/null)
        [ $? -ne 0 ] &amp;&amp; exit 0
        ;;
    *)
        enhanced_list="No Project,Create New Project,$project_choice"
        project_list=$(echo "$enhanced_list" | sed 's/,/", "/g')
        project=$(osascript -e "choose from list {\"$project_list\"} with prompt \"Select a project:\" cancel button name \"Cancel\" OK button name \"Select\"" -e 'result as string' 2&gt;/dev/null)
        
        if [ $? -ne 0 ] || [ "$project" = "false" ]; then
            exit 0
        elif [ "$project" = "No Project" ]; then
            project=""
        elif [ "$project" = "Create New Project" ]; then
            project=$(osascript -e 'display dialog "Enter new project name:" default answer "" buttons {"Cancel", "OK"} default button "OK"' -e 'text returned of result' 2&gt;/dev/null)
            [ $? -ne 0 ] &amp;&amp; exit 0
        fi
        ;;
esac

access=$(osascript -e 'display dialog "Make document private?" buttons {"Cancel", "No", "Yes"} default button "Yes"' -e 'button returned of result' 2&gt;/dev/null)
[ $? -ne 0 ] || [ "$access" = "Cancel" ] &amp;&amp; exit 0
access_level="private"
[ "$access" = "No" ] &amp;&amp; access_level="public"

echo "Starting upload..." &gt;&gt; "$logfile"

python_files=""
while IFS= read -r file; do
    if [ -n "$file" ]; then
        escaped_file=$(printf '%s' "$file" | sed "s/'/'\\\\''/g")
        if [ -n "$python_files" ]; then
            python_files="$python_files, "
        fi
        python_files="$python_files'$escaped_file'"
    fi
done &lt; "$temp_unique_files"

python3 2&gt;&gt;"$logfile" &lt;&lt;EOF
import warnings
warnings.filterwarnings('ignore')

from documentcloud import DocumentCloud
import webbrowser, subprocess, sys, os
import traceback

files = [$python_files]
email, password = "$email", "$password"
single_title, project, access = "$title", "$project", "$access_level"
file_count = len(files)

try:
    client = DocumentCloud(email, password)
    
    project_obj = None
    if project and project.strip():
        project_obj, created = client.projects.get_or_create_by_title(project.strip())
    
    uploaded_docs = []
    for i, file_path in enumerate(files):
        doc_title = single_title if file_count == 1 and single_title else os.path.basename(file_path)
        kwargs = {"title": doc_title, "access": access}
        if project_obj:
            kwargs["project"] = project_obj.id
        
        doc = client.documents.upload(file_path, **kwargs)
        uploaded_docs.append(doc)
    
    if file_count == 1:
        subprocess.run(["osascript", "-e", 'display notification "Upload succeeded" with title "DocumentCloud"'])
        if uploaded_docs[0].canonical_url:
            webbrowser.open(uploaded_docs[0].canonical_url)
    else:
        subprocess.run(["osascript", "-e", f'display notification "Successfully uploaded {file_count} files" with title "DocumentCloud"'])
        url = f"https://www.documentcloud.org/projects/{project_obj.id}-{project_obj.slug}/" if project_obj else "https://www.documentcloud.org/documents/"
        webbrowser.open(url)

except Exception as e:
    error_details = traceback.format_exc()
    print(f"Upload failed: {e}", file=sys.stderr)
    print(f"Full traceback: {error_details}", file=sys.stderr)
    subprocess.run(["osascript", "-e", 'display notification "Upload failed. Check log." with title "DocumentCloud Error"'])
    sys.exit(1)
EOF

upload_status=$?

rm -f "$temp_unique_files"

if [ $upload_status -ne 0 ]; then
    open -a TextEdit "$logfile"
    exit 1
fi

exit 0</string>
					<key>CheckedForUserDefaultShell</key>
					<true/>
					<key>inputMethod</key>
					<integer>0</integer>
					<key>shell</key>
					<string>/bin/bash</string>
					<key>source</key>
					<string></string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.RunShellScript</string>
				<key>CFBundleVersion</key>
				<string>2.0.3</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunShellScriptAction</string>
				<key>InputUUID</key>
				<string>655B9BB9-2795-4249-80A5-CC9C23DA7E93</string>
				<key>Keywords</key>
				<array>
					<string>Shell</string>
					<string>Script</string>
					<string>Command</string>
					<string>Run</string>
					<string>Unix</string>
				</array>
				<key>OutputUUID</key>
				<string>14B2695A-6A5F-4128-90C0-95944366193E</string>
				<key>UUID</key>
				<string>8FEEF84A-3AD9-4002-86BE-7A68FE6B133D</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<integer>0</integer>
						<key>name</key>
						<string>inputMethod</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
					<key>1</key>
					<dict>
						<key>default value</key>
						<false/>
						<key>name</key>
						<string>CheckedForUserDefaultShell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>1</string>
					</dict>
					<key>2</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>2</string>
					</dict>
					<key>3</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>COMMAND_STRING</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>3</string>
					</dict>
					<key>4</key>
					<dict>
						<key>default value</key>
						<string>/bin/sh</string>
						<key>name</key>
						<string>shell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>4</string>
					</dict>
				</dict>
				<key>conversionLabel</key>
				<integer>0</integer>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>380.250000:370.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run Shell Script.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>connectors</key>
	<dict>
		<key>A78EFB15-ECC8-4D28-8615-F0ECB6C244FE</key>
		<dict>
			<key>from</key>
			<string>70C8C533-E9C4-4F27-8CC7-F536B71B7737 - 70C8C533-E9C4-4F27-8CC7-F536B71B7737</string>
			<key>to</key>
			<string>8FEEF84A-3AD9-4002-86BE-7A68FE6B133D - 8FEEF84A-3AD9-4002-86BE-7A68FE6B133D</string>
		</dict>
	</dict>
	<key>workflowMetaData</key>
	<dict>
		<key>applicationBundleIDsByPath</key>
		<dict/>
		<key>applicationPaths</key>
		<array/>
		<key>backgroundColor</key>
		<data>
		YnBsaXN0MDDUAQIDBAUGBwpYJHZlcnNpb25ZJGFyY2hpdmVyVCR0b3BYJG9i
		amVjdHMSAAGGoF8QD05TS2V5ZWRBcmNoaXZlctEICVRyb290gAGpCwwXGBkk
		KisyVSRudWxs1Q0ODxAREhMUFRZWJGNsYXNzW05TQ29sb3JOYW1lXE5TQ29s
		b3JTcGFjZV1OU0NhdGFsb2dOYW1lV05TQ29sb3KACIADEAaAAoAEVlN5c3Rl
		bV8QD3N5c3RlbUJsdWVDb2xvctYNGhsPHB0SHyAhIiNcTlNDb21wb25lbnRz
		VU5TUkdCXxASTlNDdXN0b21Db2xvclNwYWNlXxAQTlNMaW5lYXJFeHBvc3Vy
		ZYAIRzAgMCAxIDFPEBEwIDAgMC45OTgxOTkyMjQ1ABABgAVBMdMlJg0nKClU
		TlNJRFVOU0lDQxAHgAaAB08RDEgAAAxITGlubwIQAABtbnRyUkdCIFhZWiAH
		zgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAAAA
		9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0
		AAAB8AAAABRia3B0AAACBAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRi
		WFlaAAACQAAAABRkbW5kAAACVAAAAHBkbWRkAAACxAAAAIh2dWVkAAADTAAA
		AIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAAAEDAAAACR0ZWNoAAAE
		MAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAACAx0ZXh0
		AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFu
		eQAAZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJz
		UkdCIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVog
		AAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvogAAOPUAAAOQWFlaIAAAAAAA
		AGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MAAAAAAAAAFklF
		QyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d3
		LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAABkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdC
		IGNvbG91ciBzcGFjZSAtIHNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4x
		IERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtIHNSR0IAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZpZXdpbmcgQ29uZGl0
		aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZSBWaWV3
		aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAHZpZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAA
		AVhZWiAAAAAAAEwJVgBQAAAAVx/nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAA
		AAAAAAAAAo8AAAACc2lnIAAAAABDUlQgY3VydgAAAAAAAAQAAAAABQAKAA8A
		FAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAFkAXgBjAGgAbQByAHcAfACB
		AIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbAOAA5QDrAPAA
		9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGD
		AYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgC
		QQJLAlQCXQJnAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMh
		Ay0DOANDA08DWgNmA3IDfgOKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0E
		OwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4QTwBP4FDQUcBSsFOgVJBVgFZwV3
		BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsGjAadBq8GwAbRBuMG
		9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4IggiW
		CKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoK
		gQqYCq4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyO
		DKcMwAzZDPMNDQ0mDUANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO
		7g8JDyUPQQ9eD3oPlg+zD88P7BAJECYQQxBhEH4QmxC5ENcQ9RETETERTxFt
		EYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxNDE2MTgxOkE8UT5RQGFCcU
		SRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8WshbWFvoXHRdB
		F2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGnca
		nhrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4W
		HkAeah6UHr4e6R8THz4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h
		+yInIlUigiKvIt0jCiM4I2YjlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3
		JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KHEooijUKQYpOClrKZ0p0CoCKjUq
		aCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rLeEuFi5MLoIuty7u
		LyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/M7gz
		8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkF
		OUI5fzm8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+
		oD7gPyE/YT+iP+JAI0BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RH
		RIpEzkUSRVVFmkXeRiJGZ0arRvBHNUd7R8BIBUhLSJFI10kdSWNJqUnwSjdK
		fUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lTm5Ot08AT0lPk0/dUCdQcVC7
		UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlxWqVb3V0RX
		klfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5s
		Xr1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl
		52Y9ZpJm6Gc9Z5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1g
		bbluEm5rbsRvHm94b9FwK3CGcOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1
		hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553pGeqV7BHtje8J8IXyBfOF9QX2h
		fgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHYSAhOOFR4Wrhg6G
		cobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOzo82
		j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyY
		uJkkmZCZ/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqIm
		opajBqN2o+akVqTHpTilqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+ms
		XKzQrUStuK4trqGvFq+LsACwdbDqsWCx1rJLssKzOLOutCW0nLUTtYq2AbZ5
		tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pvgq+hL7/v3q/9cBwwOzB
		Z8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3yzbLtsw1
		zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX
		4Nhk2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj
		4+vkc+T85YTmDeaW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070Dv
		zPBY8OXxcvH/8ozzGfOn9DT0wvVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH
		/Jj9Kf26/kv+3P9t///SLC0uL1okY2xhc3NuYW1lWCRjbGFzc2VzXE5TQ29s
		b3JTcGFjZaIwMVxOU0NvbG9yU3BhY2VYTlNPYmplY3TSLC0zNFdOU0NvbG9y
		ojMxAAgAEQAaACQAKQAyADcASQBMAFEAUwBdAGMAbgB1AIEAjgCcAKQApgCo
		AKoArACuALUAxwDUAOEA5wD8AQ8BEQEZAS0BLwExATMBOgE/AUUBRwFJAUsN
		lw2cDacNsA29DcANzQ3WDdsN4wAAAAAAAAIBAAAAAAAAADUAAAAAAAAAAAAA
		AAAAAA3m
		</data>
		<key>backgroundColorName</key>
		<string>systemBlueColor</string>
		<key>inputTypeIdentifier</key>
		<string>com.apple.Automator.fileSystemObject</string>
		<key>outputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>presentationMode</key>
		<integer>15</integer>
		<key>processesInput</key>
		<false/>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.fileSystemObject</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<false/>
		<key>systemImageName</key>
		<string>NSTouchBarSend</string>
		<key>useAutomaticInputType</key>
		<true/>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
